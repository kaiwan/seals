#!/bin/bash
#######################################################################
# build.config.arm64_rpi3b_cm3
#
# Part of the SEALs project.
# This is the configuration file; all config variables must go here.
# 
# !! IMP NOTE TO THE END-USER OF THIS PROJECT !!
# You are responsible for editing this configuration file, setting the 
# variables to sane values.
# To help you out, the place in the source below which has the config 
# variables that you MUST update have been marked with a comment line 
# as follows:
# # @@@@@
# So, you could just search for this string '@@@@@' (excluding the quotes of course),
# and make sure you update the following config variable(s) to the sane value 
# for your box.
# !!
#---
# Author: Kaiwan N Billimoria
# (C) kaiwanTECH
#---
#######################################################################
#
#----------------------
# !!!VERY IMPORTANT!!! 
#----------------------
# Pl read the documentation here, at least once:
# https://github.com/kaiwan/seals/wiki
#----------------------
#
# Generic Config file.
# For a minimal QEMU-ARM project, we Expect that:
#
# - an appropriate toolchain is installed and working, and setup in the config below
#     details: https://github.com/kaiwan/seals/wiki/HOWTO-Install-required-packages-on-the-Host-for-SEALS
# - a recent version of the Linux kernel source tree is available and setup in the config below
# - a recent version of busybox source tree is available and setup in the config below
##############

set -a   # auto export all vars

#--------GENERIC CONFIG OPTIONS------------------------------------------------------------
##################### UPDATE as required
# @@@@@
CONFIG_NAME_STR="SEALs config file for the Raspberry Pi 3B AArch64 (or RPi CM3 Compute Model 3)"
COLOR=1        # terminal color support? Assume yes..
GUI_MODE=0     # auto-detects GUI / console mode
DEBUG=0        # set to 1 to get debug messages displayed
[ ${DEBUG} -eq 1 ] && export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
VERBOSE_MSG=0  # set to 1 to get more verbose messages displayed
                 #  [loglevel][date-timestamp]<actual-message>
LOGFILE_COMMON=log_seals.txt

###------###
TOPDIR=$(pwd)
#------------------------------------------------------------------------------

#--------KEY DISK LOCATIONS and Settings---------------------------------------
### Locations on Disk ###
### UPDATE ### on your system!
# @@@@@
STG=$(realpath ~/seals_staging/seals_staging_rpi3b)
STG=$(realpath ~/SEALS_staging/SEALS_staging_rpi3b_arm64)
 # Recommendation: if running a cloud-sync service (like Dropbox), keep the
 # staging area outside it.
ROOTFS=${STG}/rootfs
IMAGES_FOLDER=${STG}/images
IMAGES_BKP_FOLDER=${STG}/images_bkp
CONFIGS_FOLDER=${STG}/configs
# Verbose build (for the kernel and busybox)? (if 1, we run as 'make V=1 ...')
VERBOSE_BUILD=0
#------------------------------------------------------------------------------

#--------'HARDWARE'------------------------------------------------------------
# SEALs (virtual) "Hardware"
# @@@@@
# Select the CPU arch (to build the kernel for); the value to specify is the
# name of the dir under <kernel-src>/arch/XXX
ARCH=arm64
ARCH_PLATFORM=""
QEMUNAME=qemu-system-aarch64

CPU_MODEL=cortex-a53
SEALS_RAM=1G

# Select the platform (to build the kernel for).
# @@@@@
# English-like name
ARM_PLATFORM_STR="Qemu Rpi3B"

# ! IMPORTANT !
# Selecting the platform varies with the ARCH:
# ===> For Aarch32 (ARM):
# Pl set the variable ARM_PLATFORM carefully; it will be used to setup
# the inital config and is therefore very critical that it's given correctly:
#   make ARCH=arm ${ARM_PLATFORM}_defconfig
# So, check under <kernel-src>/arch/<cpu>/configs/
# for the best match to your platform, in the form
#  <ARM_PLATFORM>_defconfig
# and put it here.. F.e.:
#ARM_PLATFORM=vexpress-a9
# 
# ===> For Aarch64 (arm64):
# On Aarch64, all platforms will be selected by default.
# (Can see them within the 'Platform selection' menu).
# Either build it this way or deselect all and enable only the platform(s) you want to support...
# So here, we leave the variable ARM_PLATFORM as NULL to fulfill the default case (all platforms)
ARM_PLATFORM=

# ARM_PLATFORM_OPT is the value passed via the -M (machine) switch to Qemu
# Look for it via qemu-system-arm -M ?   ; eg.
#  qemu-system-arm -M ? |grep -i "i.mx"
ARM_PLATFORM_OPT=raspi3b

SMP_EMU_MODE=0  # make '1' to have qemu run w/ 4 emulated cores 
                # (only works on appropriate h/w-emulated platforms)
#------------------------------------------------------------------------------


# Okay, so under the ${STG} folder, we expect you have extracted the:

#--------TOOLCHAIN------------------------------------------------------------
# The toolchain to use; expect that it is installed and the PATH is setup..
# @@@@@
CXX=aarch64-none-linux-gnu- # toolchain prefix
# CXX_LOC is the location of the x86-to-ARM toolchain on disk
# (used to setup the PATH and locate the ARM shared libraries within the toolchain)
# @@@@@
CXX_LOC=~/tc/arm-gnu-toolchain-13.2.Rel1-x86_64-aarch64-none-linux-gnu/bin/
# Keep your toolchain in the PATH
PATH=$PATH:${CXX_LOC}/bin
#------------------------------------------------------------------------------

#--------KERNEL------------------------------------------------------------
### UPDATE ### on your system!
# Okay, so under the ${STG} folder (or other), we expect you have extracted the 
# source of the Linux kernel into ${KERNEL_FOLDER} , ver ${KERNELVER}.
# (Update the variables below to reflect your settings and installation).
# @@@@@
KERNELVER=6.1.25
KERNEL_FOLDER=${STG}/linux-${KERNELVER}/

# @@@@@
# DTB: specify the Device Tree Blob <filename>.dtb
# (Leave empty for the Aarch64 Qemu virt system)
DTB_BLOB=broadcom/bcm2837-rpi-cm3-io3.dtb
#DTB_BLOB=broadcom/bcm2837-rpi-3-b.dtb
#####

# @@@@@
# SEALs kernel command-line
SERIAL_CONSOLE=ttyAMA0
SEALS_K_CMDLINE="console=${SERIAL_CONSOLE} root=/dev/mmcblk0 rw init=/sbin/init"
# if 512M RAM, reserve 32M for crashk, else if 256M RAM, reserve 16M
K_CMDLINE_XTRA=""
#K_CMDLINE_XTRA="crashkernel=32M" # works with 32M not 16M [?]
#K_CMDLINE_XTRA="initcall_debug ignore_loglevel debug"
[ ! -z "${K_CMDLINE_XTRA}" ] && SEALS_K_CMDLINE="${SEALS_K_CMDLINE} ${K_CMDLINE_XTRA}"

#--------BUSYBOX and ROOTFS------------------------------------------------------------
# Also under the ${STG} folder, we expect you have extracted the
# source of busybox into the folder ${BB_FOLDER} ver ${BB_VER}.
# (Update the variables below to reflect your settings and installation).
# @@@@@
BB_FOLDER=${STG}/busybox  # with the GitHub ver
SHELL2RUN=/bin/sh  #/bin/bash

## RootFS
# !Careful! Set to 1 to force a rebuild of the rootfs; implies OVERWRITING any
# existing rootfs
RFS_FORCE_REBUILD=0
# Rootfs size: Recommendation: if using a kdump kernel, as a rough thumb rule,
# make it ~ 150% of the size of RAM on the platform (so for eg. if the RAM is 512M,
# make the rootfs size ~ >= 768 MB).
# Else (no kdump), 512 MB is fine for the Vexpress.
RFS_SZ_MB=512
MYPRJ=myprj
#------------------------------------------------------------------------------

#--------MISC / REMAINING Options------------------------------------------------------------
##### Config vars for what to build
# VAR=1   :   'do' the work 'VAR'
# VAR=0   :   'do Not' do the work 'VAR'
BUILD_KERNEL=0
BUILD_ROOTFS=0
GEN_EXT4_ROOTFS_IMAGE=0
SAVE_BACKUP_IMG_CONFIGS=0
RUN_QEMU=0
#SHELL_PROMPT_STR="qarm64 \w # "

### "WIPE_*_CONFIG" directives
# Set var to 'y' implies any existing kernel configuration is wiped out.
# Suggestion: set to 'y' for the FIRST build with a clean kernel source tree..
# @@@@@
WIPE_KERNEL_CONFIG=0

# Set var to '1' implies any existing busybox configuration is wiped out.
# Suggestion: set to '1' for the FIRST build with a clean busybox source tree..
# @@@@@
WIPE_BUSYBOX_CONFIG=0

# Set var to '1' implies that the busybox configuration will be set to have
# all config options OFF/No by default.
# Suggestion: set to '1' when you want an 'as tiny as possible' busybox binary
# and know how to configure it
# @@@@@
TINY_BUSYBOX_CONFIG=0

###
# Config vars for when we run QEMU:
KGDB_MODE=0  # make '1' to have qemu run w/ the '-S' switch (waits for gdb to 'connect')
#------------------------------------------------------------------------------

#--- End build.config
